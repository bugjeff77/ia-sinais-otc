# WebApp com IA para gerar sinais de op√ß√µes bin√°rias OTC
# Pares: EURUSD-OTC, EURGBP-OTC, GBPJPY-OTC

import streamlit as st
import pandas as pd
import numpy as np
import datetime
import yfinance as yf

# Configura√ß√£o inicial
theme_color = "#121212"
st.set_page_config(page_title="IA de Sinais OTC", layout="centered")

st.markdown(f"""
    <style>
    body {{ background-color: {theme_color}; color: white; }}
    .stApp {{ background-color: {theme_color}; }}
    </style>
""", unsafe_allow_html=True)

st.title("ü§ñ IA de Sinais OTC - Polarium")

# Pares OTC analisados
pares = {
    "EURUSD-OTC": "EURUSD=X",
    "EURGBP-OTC": "EURGBP=X",
    "GBPJPY-OTC": "GBPJPY=X"
}

# Fun√ß√£o para calcular RSI
def calcular_rsi(series, periodo=14):
    delta = series.diff()
    ganho = delta.where(delta > 0, 0)
    perda = -delta.where(delta < 0, 0)
    media_ganho = ganho.rolling(window=periodo).mean()
    media_perda = perda.rolling(window=periodo).mean()
    rs = media_ganho / media_perda
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Gera√ß√£o de sinais baseada em RSI e candle
@st.cache_data(ttl=60)
def gerar_sinal(par_otc, ticker):
    df = yf.download(ticker, period="2d", interval="1m")
    if df.empty:
        return None
    df['RSI'] = calcular_rsi(df['Close'])
    rsi_atual = round(df['RSI'].iloc[-1], 2)
    candle_anterior = df['Close'].iloc[-2] < df['Open'].iloc[-2]
    candle_direcao = "revers√£o" if candle_anterior else "continua√ß√£o"

    if rsi_atual < 30 and candle_direcao == "revers√£o":
        direcao = "CALL"
    elif rsi_atual > 70 and candle_direcao == "revers√£o":
        direcao = "PUT"
    else:
        direcao = "N√ÉO OPERAR"

    return {
        "par": par_otc,
        "hora": datetime.datetime.now().strftime("%H:%M:%S"),
        "RSI": rsi_atual,
        "Candle": candle_direcao,
        "Sinal": direcao
    }

# Gera sinais para cada par
resultados = [gerar_sinal(par_otc, ticker) for par_otc, ticker in pares.items()]
df = pd.DataFrame([r for r in resultados if r])

# Exibe os sinais no painel
st.subheader("üìä Sinais Gerados")
st.dataframe(df.style.applymap(
    lambda val: "color: green" if val == "CALL" else ("color: red" if val == "PUT" else "color: gray"),
    subset=["Sinal"]))

# Atualiza automaticamente a cada minuto
st.caption("Atualiza automaticamente a cada minuto. √öltima atualiza√ß√£o: " + datetime.datetime.now().strftime("%H:%M:%S"))
